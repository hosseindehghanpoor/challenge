#here cloud init files are created 
- name: Create cloud-init files
  template: 
    src: "{{ role_path }}/template/cloud-init-template.j2"
    dest: "{{ role_path }}/files/terraform_output/cloud-init-dir/cloud-init-{{ item }}.yml"
  loop: "{{ groups['all'] }}"

- name: Lets create the terraform.tfvars file using inventory data
  template:
    src: "{{ role_path }}/template/terraform.tfvars.j2"
    dest: "{{ role_path }}/files/terraform_output/terraform.tfvars"

- name: Check if Terraform providers are already initialized
  stat:
    path: "{{ role_path }}/files/terraform_output/.terraform"
  register: terraform_init_check

- name: Run Terraform init
  command: terraform init
  args:
    chdir: "{{ role_path }}/files/terraform_output/"
  when: not terraform_init_check.stat.exists

- name: Check if tfstate exists
  stat:
    path: "{{ role_path }}/files/terraform_output/terraform.tfstate"
  register: tfstate_check

- name: Run Terraform refresh if tfstate exists
  command: terraform refresh -var-file=terraform.tfvars -state=terraform.tfstate
  args:
    chdir: "{{ role_path }}/files/terraform_output"
  when: tfstate_check.stat.exists

# --- Run Terraform plan ---
- name: Run Terraform plan
  command: >
    terraform plan -var-file=terraform.tfvars -state=terraform.tfstate -out=terraform.tfplan
  args:
    chdir: "{{ role_path }}/files/terraform_output"
  register: terraform_plan
  ignore_errors: true

# --- Run Terraform apply ---
- name: Run Terraform apply
  command: terraform apply -auto-approve -state=terraform.tfstate terraform.tfplan
  args:
    chdir: "{{ role_path }}/files/terraform_output"
  when: terraform_plan.rc == 0
  register: terraform_apply

# --- Collect VM IPs from tfstate ---
- name: Initialize vm_ips dictionary
  set_fact:
    vm_ips: {}

- name: Get IP addresses of VMs
  command: terraform output -json -state=terraform.tfstate
  args:
    chdir: "{{ role_path }}/files/terraform_output"
  register: terraform_output

- name: Parse vm_ips from terraform output
  set_fact:
    vm_ips_all: "{{ (terraform_output.stdout | default('{}') | from_json).vm_ips.value | default({}) }}"
  when: terraform_output.stdout is defined and terraform_output.stdout | trim != ''

- name: Build vm_ips dictionary for inventory hosts
  set_fact:
    vm_ips: "{{ vm_ips | default({}) | combine({ item: (vm_ips_all[item] | default('')) }) }}"
    cacheable: true
  loop: "{{ groups['all'] }}"
  when: vm_ips_all[item] is defined

- name: Debug VM IP addresses
  debug:
    var: vm_ips

- name: Save IP addresses to a file
  copy:
    content: "{{ vm_ips | to_nice_yaml }}"
    dest: "{{ role_path }}/files/vm_ips.yml"

- name: Re-add hosts with ansible_host from vm_ips using add_host
  add_host:
    hostname: "{{ item }}"
    ansible_host: "{{ vm_ips[item] }}"
  loop: "{{ groups['all'] }}"
  when: item in vm_ips
  delegate_to: localhost
